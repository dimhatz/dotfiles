/*
----------------------------------------
(home)
current:
Version: 1.87.2 (user setup)
Commit: 863d2581ecda6849923a2118d93a088b0745d9d6
Date: 2024-03-08T15:20:17.278Z
Electron: 27.3.2
ElectronBuildId: 26836302
Chromium: 118.0.5993.159
Node.js: 18.17.1
V8: 11.8.172.18-electron.0
OS: Windows_NT x64 10.0.19044

old:
Version: 1.77.3 (user setup)
Commit: 704ed70d4fd1c6bd6342c436f1ede30d1cff4710
Date: 2023-04-12T09:16:02.548Z
Electron: 19.1.11
Chromium: 102.0.5005.196
Node.js: 16.14.2
V8: 10.2.154.26-electron.0
OS: Windows_NT x64 10.0.19044
Sandboxed: No

------------------
Extensions:

- Editorconfig 0.16.4 -> 
- ESLint 2.1.16 -> 2.2.2 -> 2.4.4
- Gitlens 11.2.1 -> 12.0.6 -> 14.9.0
- Neovim 0.0.82
- Prettier 5.8.0 -> 9.5.0 -> 10.4.0
- Vim 1.20.3 -> v1.24.3 -> 1.27.1 (seems to lag) -> back to 1.24.3
- Hugo language support 1.3.1
- Elm (by Elm tooling) 2.4.1
Chrome Extension Manifest JSON Schema v1.0.2


Not used by me anymore:
- Angular Language Service v11.1.1 -> v11.2.14
- Debugger for Chrome 4.12.12 -> 
- TSLint 1.3.3 -> 

Needs further investigation:
https://marketplace.visualstudio.com/items?itemName=vhanla.borderless
uses shortcut to make borders disappear, its setting "bordersizable" allows (currently on windows) to reposition fullscreen/halfscreen.
The borderless modes only going from halfscreen -> fullscreen works.
Also, on halfscreen (and 'borderless' setting), the bottom status line is beyond screen's bottom, so only the upper half is visible.
Note: in order to work, this extension needs VsCode title bar setting to be changed to "native", as it seems to manipulate windows 10 border styling.

*/
{
  "editor.fontFamily": "Source Code Pro Regular",
  // "editor.quickSuggestionsDelay": 1000,
  // disable automatic triggering of autocompletion
  "editor.quickSuggestions": {
    "other": "off",
    "comments": "off",
    "strings": "off"
  },

  "editor.acceptSuggestionOnCommitCharacter": true,
  "editor.suggestOnTriggerCharacters": false,
  "editor.scrollBeyondLastLine": false,
  "editor.linkedEditing": true,

  // ----------------------------------- ORIGINAL VIM SETTINGS BEGIN --------------------------------------------------
  "vim.useSystemClipboard": true,
  "vim.leader": "<space>",
  "vim.easymotion": true,
  "vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf;",
  // some keys need to also be set here
  // as per https://github.com/VSCodeVim/Vim/blob/master/package.json
  "vim.handleKeys": {
    // opens/closes file explorer sidebar
    // c-b would not work without <> here
    "<C-b>": false
  },
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      // gr goes to references of thing under cursor
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    {
      // gr goes to references of thing under cursor
      "before": ["<C-f>"],
      "after": ["y", "e", "/", "<C-v>", "<CR>"]
    },
    {
      // restore default, c-t searches for symbol under cursor in workspace
      // (like <c-p> followed by #). This is likely less useful than find occurrencess etc
      "before": ["<C-t>"],
      "commands": ["workbench.action.showAllSymbols"]
    },
    {
      // gt to trigger parameter hints
      "before": ["g", "t"],
      "commands": ["editor.action.triggerParameterHints"]
    },
    {
      // surround with s instead of ys -> "<plugys>" is a special hack as seen here: https://github.com/VSCodeVim/Vim/issues/6848#issuecomment-875798184
      "before": ["s"],
      "after": ["<plugys>"],
      "commands": []
    },
    {
      // workaround: I have mapped <C-s> to vim's <C-[> in keybindings.json,
      // vscodevim will not map <c-s> directly, because it does not listen for this key combination
      "before": ["<C-[>"],
      "commands": ["extension.vim_escape", "workbench.action.files.save"]
    },
    {
      // use <leader> prefix instead of <leader><leader> for easymotion
      "before": ["<leader>", "k"],
      "after": ["<leader>", "<leader>", "k"]
    },
    {
      // use <leader> prefix instead of <leader><leader> for easymotion
      "before": ["<leader>", "j"],
      "after": ["<leader>", "<leader>", "j"]
    },
    {
      // use <leader> prefix instead of <leader><leader> for easymotion
      "before": ["<leader>", "w"],
      "after": ["<leader>", "<leader>", "w"]
    },
    {
      // use <leader> prefix instead of <leader><leader> for easymotion
      "before": ["<leader>", "e"],
      "after": ["<leader>", "<leader>", "e"]
    },
    {
      // use <leader> prefix instead of <leader><leader> for easymotion
      "before": ["<leader>", "b"],
      "after": ["<leader>", "<leader>", "b"]
    },
    {
      // <c-v> to enter visual line
      // do not use map v <c-v> because the commands for visual will misbehave (like surrounding visual etc)
      "before": ["c-v"],
      "after": ["V"]
    },
    {
      // this is the new visual block
      "before": ["V"],
      "after": ["c-v"]
    },
    {
      // delete char into black hole
      "before": ["x"],
      "after": ["\"", "_", "d", "l"]
    },
    {
      // delete till end of the line into black hole
      "before": ["X"],
      "after": ["\"", "_", "D"]
    },
    {
      // do not yank what is being changed (would overwrite what is already yanked in main register)
      "before": ["c"],
      "after": ["\"", "_", "c"]
    },
    {
      // do not yank what is being changed (would overwrite what is already yanked in main register)
      "before": ["C"],
      "after": ["\"", "_", "C"]
    },
    {
      // esc in normal removes hlsearch
      "before": ["<Esc>"],
      "after": ["<Esc>"],
      // do not add "extension.vim_escape" to commands, it will result in infinite loop (maybe this is the way recursive mapping is implemented...)
      "commands": [":noh", "closeParameterHints"]
    },
    {
      // workaround for undo to not undo multiple steps etc, also will update the modified symbol on tab when undoing to last saved chage
      // todo: remove this when fixed: https://github.com/VSCodeVim/Vim/issues/2007
      "before": ["u"],
      "after": [],
      "commands": [
        {
          "command": "undo",
          "args": []
        }
      ]
    },
    {
      // workaround for undo to not undo multiple steps etc, also will update the modified symbol on tab when undoing to last saved chage
      // todo: remove this when fixed: https://github.com/VSCodeVim/Vim/issues/2007
      "before": ["<C-r>"],
      "after": [],
      "commands": [
        {
          "command": "redo",
          "args": []
        }
      ]
    },
    {
      // use vscode's movement to avoid opening folds, likely faster than mapping to gj/gk, dj still works
      "before": ["j"],
      "after": [],
      "commands": ["cursorDown"]
    },
    {
      // use vscode's movement to avoid opening folds, likely faster than mapping to gj/gk, dj still works
      "before": ["k"],
      "after": [],
      "commands": ["cursorUp"]
    },
    // {
    //     // workaround to stop opening folds when stepping into them, this will also make j move between wrapped lines, insteaad of skipping
    //     // https://github.com/VSCodeVim/Vim/issues/1004
    //     "before": [ "j" ],
    //     "after": ["g", "j"],
    //     "commands": []
    //     // cursorUp
    //     // cursorDown
    // },
    // {
    //     // workaround analogous to j above
    //     "before": [ "k" ],
    //     "after": ["g", "k"],
    //     "commands": []
    // },
    {
      // Y yanks till end of line
      "before": ["Y"],
      "after": ["y", "$"],
      "commands": []
    },
    {
      // <c-j> will show more screen downwards (scroll the screen upwards)
      "before": ["c-j"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-e" ],
      "commands": ["scrollLineDown"]
    },
    {
      // <c-k> will show more screen upwards (scroll the screen downwards)
      "before": ["c-k"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-y" ],
      "commands": ["scrollLineUp"]
    },
    {
      // parens go to prev tab (open editor)
      "before": ["("],
      "commands": ["workbench.action.previousEditor"]
    },
    {
      // parens go to next tab (open editor)
      "before": [")"],
      "commands": ["workbench.action.nextEditor"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["p"],
      "after": ["p", "g", "v", "y"]
      // alternatively, the below works too, but results in needing 2 undo actions to undo
      // "after": [ "\"", "_", "d", "P" ]
    },
    {
      "before": ["x"],
      "after": ["\"", "_", "d"]
    },
    {
      "before": ["s"],
      "after": ["S"]
    },
    {
      "before": ["c"],
      "after": ["\"", "_", "c"]
    },
    {
      // <c-j> will show more screen downwards (scroll the screen upwards)
      "before": ["c-j"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-e" ],
      "commands": ["scrollLineDown"]
    },
    {
      // <c-k> will show more screen upwards (scroll the screen downwards)
      "before": ["c-k"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-y" ],
      "commands": ["scrollLineUp"]
    }
  ],
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      // workaround: I have mapped vscode's <C-s> to vim's <C-[> in keybindings.json,
      // vscodevim will not map <c-s> directly, because it does not listen for this key combination
      "before": ["<C-[>"],
      "after": ["<Esc>"],
      "commands": [":w"]
      // alternatively
      // "commands": ["workbench.action.files.save"]
      // not sure whether this makes any difference, but using :w just in case vim handles the actions queue so that there is no race condition
    },
    {
      // <c-j> will show more screen downwards (scroll the screen upwards)
      "before": ["c-j"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-e" ],
      "commands": ["scrollLineDown"]
    },
    {
      // <c-k> will show more screen upwards (scroll the screen downwards)
      "before": ["c-k"],
      // scrolling will lag a lot if mapped with "after", using "command" instead
      // "after": [ "c-y" ],
      "commands": ["scrollLineUp"]
    }
    // { // disabling since we use vscode's bindings to c-j / c-k for selecting from autocomplete suggestions
    //   // c-j now chooses suggestion from autocomplete
    //   "before": ["<C-j>"],
    //   "after": ["<C-n>"]
    // },
    // {
    //   // c-k now chooses suggestion from autocomplete
    //   "before": ["<C-k>"],
    //   "after": ["<C-p>"]
    // },
    // {
    //   // disable since we now use c-j
    //   "before": ["<C-n>"],
    //   "after": ["<nop>"]
    // },
    // {
    //   // disable since we now use c-k
    //   "before": ["<C-p>"],
    //   "after": ["<nop>"]
    // },
  ],
  "vim.highlightedyank.enable": true,
  "vim.hlsearch": true,
  "vim.visualstar": true,
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },

  // ----------------------------------- ORIGINAL VIM SETTINGS END --------------------------------------------------

  "workbench.startupEditor": "newUntitledFile",
  "extensions.autoUpdate": false,
  "extensions.autoCheckUpdates": false,
  "update.mode": "manual",
  "editor.cursorBlinking": "solid",
  "files.autoSave": "off",
  "diffEditor.renderSideBySide": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.codeLens.enabled": false,
  "extensions.ignoreRecommendations": false,
  "gitlens.statusBar.alignment": "left",
  "gitlens.hovers.currentLine.enabled": false,
  "gitlens.blame.toggleMode": "window",
  "git.enableSmartCommit": true,
  "files.eol": "\n",
  "eslint.run": "onSave",
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  "terminal.integrated.profiles.windows": {
    "C:\\Program Files\\Git\\bin\\bash.exe (migrated)": {
      "path": "C:\\Program Files\\Git\\bin\\bash.exe",
      "args": []
    }
  },
  "problems.decorations.enabled": false,
  "haskell.updateBehavior": "prompt",
  "haskell.plugin.ghcide-type-lenses.config.mode": "diagnostics",
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.formatOnSave": true,
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "javascript.preferences.importModuleSpecifier": "non-relative",
  "window.newWindowDimensions": "inherit",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "gitlens.currentLine.pullRequests.enabled": false,
  "gitlens.codeLens.authors.enabled": false,
  "editor.codeLens": false,
  "window.menuBarVisibility": "compact",
  "telemetry.telemetryLevel": "off",
  "workbench.editor.tabActionCloseVisibility": false,
  "editor.minimap.enabled": false,
  "workbench.colorTheme": "Default Dark+"
}
